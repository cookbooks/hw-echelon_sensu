#!/usr/bin/env ruby

require 'rubygems' if RUBY_VERSION < '1.9.0'
require 'sensu-handler'
require 'chef/config'
require 'chef/log'
require 'chef/rest'

class DefaultHandler < Sensu::Handler

  def incident_key
    @event['client']['name'] + '/' + @event['check']['name']
  end

  def client_exists?(client)
    if (<%= @enabled %>)
      chef_server_url = "<%= @server_url %>"
      client_name = "<%= @validation_client_name %>"
      signing_key_filename = "<%= @conf_dir %>/validation.pem"
      return Chef::REST.new(chef_server_url, client_name, signing_key_filename).get_rest("/clients").keys.include?(client)
    else
      return true
    end
  end

  def handle
    begin
      timeout(@event['check']['timeout'] || 10) do
        client = @event['client']['name']
        if !client_exists?(client)
          puts "Client " + client + " was not found! Removing related checks from Sensu"
          uri = URI("http://<%= @api_ip_addr %>/client/" + client)
          uri.port = 4567
          req = Net::HTTP::Delete.new(uri.path)
          req.basic_auth 'admin', 'secret'
          res = Net::HTTP.start(uri.host, uri.port) do |http|
            http.request(req)
          end
        end
      end
    rescue Timeout::Error
      puts "Timed out while searching for " + client + " on the server"
      puts "Incident: " + incident_key
    end
  end

end
