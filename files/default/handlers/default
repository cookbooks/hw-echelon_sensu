#!/usr/bin/env ruby

require 'rubygems' if RUBY_VERSION < '1.9.0'
require 'sensu-handler'
require 'chef/config'
require 'chef/log'
require 'chef/rest'

class DefaultHandler < Sensu::Handler

  def incident_key
    @event['client']['name'] + '/' + @event['check']['name']
  end

  def default
    # orgname temporary
    chef_server_url="https://api.opscode.com/organizations/#{orgname}"
    client_name = "#{orgname}-validator"
    signing_key_filename="/etc/chef/validation.pem"
    Chef::REST.new(chef_server_url, client_name, signing_key_filename)
  end

  def handle
    begin
      timeout(@event['check']['timeout'] || 10) do
        if !default.get_rest("/clients").keys.include?(@event['client']['name'])
          puts "Client " + @event['client']['name'] + " was not found! Removing related checks from Sensu"
          # my_ip_addr temporary
          uri = URI("http://#{my_ip_addr}/client/" + @event['client']['name'])
          uri.port = 4567
          req = Net::HTTP::Delete.new(uri.path)
          req.basic_auth 'admin', 'secret'
          res = Net::HTTP.start(uri.host, uri.port) do |http|
            http.request(req)
          end
        end
      end
    rescue Timeout::Error
      puts 'Timed out while searching for ' + @event['client']['name'] + ' on the server'
      puts 'Incident: ' + incident_key
    end
  end

end
